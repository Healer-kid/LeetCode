Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


approach 1: o(n2)
-------------------

Brute force:

use two for loops and check for every possible combination


approach 2:
------------------ o(nlogn)

Two pointer method

- sort the array
- keep the first pointer point to start of the array and second to the end 
- now run a for loop and check if a[left]+a[right]= sum , if it is more than sum, then decrease right ,if less then increase left else return the two pointers



approach 3:
-------------------
using hashmap







class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

       
        unordered_map<int,int> mp;
        for(int i=0;i<nums.size();i++){
                int diff=target-nums[i];

               if(mp.find(diff)!=mp.end()){
        
               return {i,mp[diff]};
            }
               mp[nums[i]]=i;
        }
          return {-1,-1};

    }    

       
  
};