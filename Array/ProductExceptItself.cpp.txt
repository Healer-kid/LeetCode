Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

approach 1:
---------------
brute force : o(n2)


approach 2: (dp)
-----------------
using two arrays 
-left array should have product of all elements from left except that number.
-similarly right should have product of all elements from right
now multiply both.

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {

        int n=nums.size();
        vector<int> left(n);
        vector<int> right(n),ans(n);
        left[0]=1;
        for(int i=1;i<n;i++){
            left[i]=left[i-1]*nums[i-1];
        }
        right[n-1]=1;
        for(int i=n-2;i>=0;i--)
        right[i]=right[i+1]*nums[i+1];

        for(int i=0;i<n;i++)
        ans[i]=left[i]*right[i];

        return ans;


    }
};


approach 3:without extra space
-----------

use only one array that is the output array 
calculate product from left or right 
then for the next iteration calculate the other product using a variable (kadane algo) 

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {

        int n=nums.size();
        vector<int> right(n);
        
   
        right[n-1]=1;
        for(int i=n-2;i>=0;i--){
            right[i]=right[i+1]*nums[i+1];

        }
        int left_temp=1;
        for(int i=0;i<n;i++){
            right[i]=left_temp*right[i];
            left_temp=left_temp*nums[i];
        }

        return right;


    }
};